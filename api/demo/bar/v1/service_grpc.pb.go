// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: demo/bar/v1/service.proto

package barv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BarServiceClient is the client API for BarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarServiceClient interface {
	// Say Hello
	//
	// Say hello takes the given parameter and says hello.
	GetDrink(ctx context.Context, in *GetDrinkRequest, opts ...grpc.CallOption) (*GetDrinkResponse, error)
}

type barServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBarServiceClient(cc grpc.ClientConnInterface) BarServiceClient {
	return &barServiceClient{cc}
}

func (c *barServiceClient) GetDrink(ctx context.Context, in *GetDrinkRequest, opts ...grpc.CallOption) (*GetDrinkResponse, error) {
	out := new(GetDrinkResponse)
	err := c.cc.Invoke(ctx, "/demo.bar.v1.BarService/GetDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarServiceServer is the server API for BarService service.
// All implementations must embed UnimplementedBarServiceServer
// for forward compatibility
type BarServiceServer interface {
	// Say Hello
	//
	// Say hello takes the given parameter and says hello.
	GetDrink(context.Context, *GetDrinkRequest) (*GetDrinkResponse, error)
	mustEmbedUnimplementedBarServiceServer()
}

// UnimplementedBarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBarServiceServer struct {
}

func (UnimplementedBarServiceServer) GetDrink(context.Context, *GetDrinkRequest) (*GetDrinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrink not implemented")
}
func (UnimplementedBarServiceServer) mustEmbedUnimplementedBarServiceServer() {}

// UnsafeBarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarServiceServer will
// result in compilation errors.
type UnsafeBarServiceServer interface {
	mustEmbedUnimplementedBarServiceServer()
}

func RegisterBarServiceServer(s grpc.ServiceRegistrar, srv BarServiceServer) {
	s.RegisterService(&BarService_ServiceDesc, srv)
}

func _BarService_GetDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServiceServer).GetDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.bar.v1.BarService/GetDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServiceServer).GetDrink(ctx, req.(*GetDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BarService_ServiceDesc is the grpc.ServiceDesc for BarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.bar.v1.BarService",
	HandlerType: (*BarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDrink",
			Handler:    _BarService_GetDrink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo/bar/v1/service.proto",
}
